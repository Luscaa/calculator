#!/usr/bin/python3

import sys
import os
import subprocess

def usage():
    print('Utilize \033[33mcalc [expressão]\033[m')
    print('  [+] - Adição')
    print('  [-] - Subtração')
    print('  [*] - Multiplicação')
    print('  [\] - Divisão')
    print('  [^] - Exponenciação')
    print(' Ordem: ')
    print('   ..Mesma ordem da matemática (PEMDAS)')
    print('   1 - Parênteses (())')
    print('   2 - Exponenciação (^)')
    print('   3 - Multiplicação (*) e dividão (/)')
    print('   4 - Soma (+) e subtração (-)')
    print(' OBS: Ao fazer operações com parêntes, coloque a expressão entre aspas para não ocorrer erros.')
    print(' Exemplos:')
    print('   calc 6-4')
    print('   calc 2*1+10')
    print('   calc \'13*(2^2)\'')
    print(' Personalizado:')
    print('   [--help] - Abre este guia')
    print('   [-p] - Teorema de pitágoras')
    print('      calc -p [cateto1] [cateto2]')
    print('Mais informações: https://github.com/Luscaa/calculator')
    print()
    sys.exit(1)


def calcular(n1,n2,operacao):
    resultado=0
    if operacao=='+':
        resultado= float(n1)+float(n2)
    elif operacao=='-':
        resultado= float(n1)-float(n2)
    elif operacao=='*':
        resultado=float(n1)*float(n2)
    elif operacao=='/':
        resultado=float(n1)/float(n2)
    elif operacao=='^':
        resultado= float(n1)**float(n2)
    return str(resultado)    



def resolver(expl):
    cont=0
    for cada in expl:
        if cada=='^':
            expl.insert(cont-1,calcular(expl[cont-1],expl[cont+1],'^'))
            for i in range(0,3):
                del(expl[cont])
        cont+=1

    cont=0
    for cada in expl:
        if cada in '*/':
            expl.insert(cont-1,calcular(expl[cont-1],expl[cont+1],cada))
            for i in range(0,3):
                del(expl[cont])
        cont+=1

    cont=0
    for cada in expl:
        if cada in '+-':
            expl.insert(cont-1,calcular(expl[cont-1],expl[cont+1],cada))
            for i in range(0,3):
                del(expl[cont])
        cont+=1
    return expl[0] if len(expl)==1 else expl

def pitagoras(n1,n2):
    return ((n1**2)+(n2**2))**(1/2)

if (len(sys.argv)>2 and sys.argv[1][0]!='-')or len(sys.argv)==1:
    print('\033[31m[Erro] digite \033[33mcalc --help\033[m')
    sys.exit(1)
exp=sys.argv[1]
if exp[0]=='-':
    if exp=='--help':
        usage()
    if exp=='-p':
        print('{}'.format(pitagoras(int(sys.argv[2]),int(sys.argv[3]))))
        sys.exit(1)
                
expl=list()
foinumber=False
cont=-1
erro=False
for cada in exp:
    if cada in '0123456789':
        if foinumber:
            expl[cont]+=cada
        else:
            expl.append(cada)
            cont+=1
        foinumber=True
    elif cada in '/+-*^()':
        foinumber=False
        cont+=1
        expl.append(cada)
    else:
        erro=True
num=0
carac=0
abriu=0
fechou=0
for cada in expl:
    if cada.isnumeric():
        num+=1
    elif cada in '+-*/^':
        carac+=1
    if cada=='(':
        abriu+=1
    elif cada==')':
        fechou+=1
if fechou!=abriu or carac!=num-1 or erro:
    print('\033[31m[Erro] Digite \033[33mcalc --help\033[m')
    sys.exit(1)




cont=0
cont2=0
for cada in expl:
    if cada=='(':
        for cadinha in expl:
            if cadinha==')':
                x=resolver(expl[cont+1:cont2])
                expl.insert(cont,x)
                del(expl[cont+1:cont2+2])
            cont2+=1
    cont+=1
expl=resolver(expl)
print(expl)
